# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

# export http_proxy="http://one.proxy.att.com:8888"
# export https_proxy="https://one.proxy.att.com:8888"

# vagrant plugin install vagrant-proxyconf

Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.

  config.vm.network "private_network", ip: "10.20.0.100"

  # config.ssh.forward_agent = true
  
  config.vm.provision "file", source: "~/.ssh/id_rsa.pub", destination: "~/.ssh/authorized_keys"

  config.vm.provision "file", source: "~/.m2/settings_track.xml", destination: "~/.m2/settings.xml"

  config.ssh.insert_key = false

  config.ssh.private_key_path = ["~/.vagrant.d/insecure_private_key", "~/.ssh/id_rsa"]

  if Vagrant.has_plugin?("vagrant-proxyconf")
    config.proxy.http     = "http://one.proxy.att.com:8888/"
    config.proxy.https    = "http://one.proxy.att.com:8888/"
    config.proxy.no_proxy = "localhost,127.0.0.1,10.20.0.100"
  end

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  config.vm.synced_folder ".", "/home/booksnook"

  config.vm.provision "shell", inline: <<-SHELL
  	
  	#!/usr/bin/env bash

  	echo "checking for booksnook process ..."
  	PID=`ps -eaf | grep bookstore | grep -v grep | awk '{print $2}'`
  	echo "PID: " $PID
	if [[ "" !=  "$PID" ]]; then
	  echo "killing $PID"
	  kill -9 $PID		
	fi

  	http_proxy_val=#{ENV['HTTP_PROXY']}

    if [[ ! -z $http_proxy_val ]]; then
        echo "copying settings.xml ..."
        sudo mkdir -p ~/.m2
        sudo cp -f /home/booksnook/settings.xml ~/.m2/
    fi

    # Install java 8
    if ! [ -x "$(command -v javac)" ]; then
    	echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections
		add-apt-repository ppa:webupd8team/java -y
		apt-get update -y
		apt-get install oracle-java8-installer
		echo "Setting environment variables for Java 8.."
		apt-get install -y software-properties-common python-software-properties oracle-java8-set-default
		echo "Done ..."
    fi

	# Install MySQL Server
	if ! [ -x "$(command -v mysql)" ]; then
		echo "Installing MySQL Server .."
		debconf-set-selections <<< 'mysql-server mysql-server/root_password password root'
  		debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password root'
  		apt-get install -y mysql-server
  		echo "Done ..."
	fi

  	# Install maven
    if ! [ -x "$(command -v mvn)" ]; then
      echo "Installing Maven ..."
      apt-get install maven -y
      echo "Done ..."
    fi

    # Install Node.js
    if ! [ -x "$(command -v node)" ]; then
    	echo "Installing Node.js ..."
  		curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
  		apt-get install -y nodejs
  		echo "Done ..."
    fi

    pushd /home/booksnook
	    if [ ! -d pageturners-api ]; then
	    	git clone https://github.com/bparimala03/pageturners-api.git
	    fi
    popd

    echo $USER

    # chown -R $USER:$USER /home/booksnook
  	
  	# pushd /home/booksnook/pageturners-api/angular
  	#   echo "Install npm packages"
   #    npm install
   #    npm install -g @angular/cli@6.0.0
   #    echo "Executing ng build"
   #    ng build --prod
  	# popd

  	mysql -uroot -proot < /home/booksnook/pageturners-api/src/main/resources/bookstore.sql

  	# Build jar file
  	pushd /home/booksnook/pageturners-api
  	mvn clean install
  	popd

	export _JAVA_OPTIONS="-Djava.net.preferIPv4Stack=true"

	echo "Starting Service ..."
	nohup java -jar /home/booksnook/pageturners-api/target/bookstore-0.0.1.jar &

	# Install Nginx if it does not exit
    if ! [ -x "$(command -v nginx)" ]; then
      sudo apt-get install nginx -y
    fi

    # Configure booksnook.club in Nginx
    sudo mkdir -p /var/www/booksnook.club/html
    sudo chown -R $USER:$USER /var/www/booksnook.club/html
    sudo chmod -R 755 /var/www
    sudo cp -f /home/booksnook/booksnook.club /etc/nginx/sites-available/booksnook.club
    sudo ln -s /etc/nginx/sites-available/booksnook.club /etc/nginx/sites-enabled/
    sudo sed -i 's/# server_names_hash_bucket_size 64;/server_names_hash_bucket_size 64;/' /etc/nginx/nginx.conf
    sudo nginx -t
    sudo systemctl restart nginx
  SHELL
end